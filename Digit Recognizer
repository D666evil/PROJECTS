{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5196,"sourceType":"datasetVersion","datasetId":3147}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\ndata = pd.read_csv('/kaggle/input/mnist-digit-recognizer/train.csv')\ndata = np.array(data)\nm, n = data.shape\nnp.random.shuffle(data) # shuffle before splitting into dev and training sets\n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\nX_dev = X_dev / 255.\n\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\nX_train = X_train / 255.\n_,m_train = X_train.shape\nY_train\n\ndef init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2\n\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1 / m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1 / m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2\ndef get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2\nW1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 300)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T11:47:23.767186Z","iopub.execute_input":"2024-06-23T11:47:23.767675Z","iopub.status.idle":"2024-06-23T11:48:01.968336Z","shell.execute_reply.started":"2024-06-23T11:47:23.767642Z","shell.execute_reply":"2024-06-23T11:48:01.966847Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Iteration:  0\n[5 6 5 ... 6 5 5] [6 0 6 ... 0 2 7]\n0.08078048780487805\nIteration:  10\n[6 6 6 ... 6 2 4] [6 0 6 ... 0 2 7]\n0.17668292682926828\nIteration:  20\n[6 6 6 ... 6 2 4] [6 0 6 ... 0 2 7]\n0.23726829268292682\nIteration:  30\n[6 6 6 ... 6 2 4] [6 0 6 ... 0 2 7]\n0.3020731707317073\nIteration:  40\n[6 0 6 ... 5 2 0] [6 0 6 ... 0 2 7]\n0.3661463414634146\nIteration:  50\n[6 0 6 ... 5 2 7] [6 0 6 ... 0 2 7]\n0.4248780487804878\nIteration:  60\n[6 0 6 ... 5 2 7] [6 0 6 ... 0 2 7]\n0.4725853658536585\nIteration:  70\n[6 0 6 ... 5 2 7] [6 0 6 ... 0 2 7]\n0.5171219512195122\nIteration:  80\n[6 0 6 ... 0 2 7] [6 0 6 ... 0 2 7]\n0.5660731707317073\nIteration:  90\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.6259268292682927\nIteration:  100\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.6595121951219513\nIteration:  110\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.6819512195121952\nIteration:  120\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.6991463414634146\nIteration:  130\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7131951219512195\nIteration:  140\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7243658536585366\nIteration:  150\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7348292682926829\nIteration:  160\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7428292682926829\nIteration:  170\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7503658536585366\nIteration:  180\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.758219512195122\nIteration:  190\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7648536585365854\nIteration:  200\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7713414634146342\nIteration:  210\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7762682926829269\nIteration:  220\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7815853658536586\nIteration:  230\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7866585365853659\nIteration:  240\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7912926829268293\nIteration:  250\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.7959756097560976\nIteration:  260\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.8001463414634147\nIteration:  270\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.8043414634146342\nIteration:  280\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.8073170731707318\nIteration:  290\n[6 0 6 ... 0 2 1] [6 0 6 ... 0 2 7]\n0.8106341463414635\n","output_type":"stream"}]},{"cell_type":"code","source":"def make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    predictions = get_predictions(A2)\n    return predictions\n\ndef test_prediction(index, W1, b1, W2, b2):\n    current_image = X_train[:, index, None]\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", label)\n    \n    current_image = current_image.reshape((28, 28)) * 255\n    plt.gray()\n    plt.imshow(current_image, interpolation='nearest')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-23T11:48:01.978153Z","iopub.execute_input":"2024-06-23T11:48:01.978907Z","iopub.status.idle":"2024-06-23T11:48:01.992435Z","shell.execute_reply.started":"2024-06-23T11:48:01.978856Z","shell.execute_reply":"2024-06-23T11:48:01.991146Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"test_prediction(7, W1, b1, W2, b2)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T12:01:55.599147Z","iopub.execute_input":"2024-06-23T12:01:55.599559Z","iopub.status.idle":"2024-06-23T12:01:55.761020Z","shell.execute_reply.started":"2024-06-23T12:01:55.599527Z","shell.execute_reply":"2024-06-23T12:01:55.760119Z"},"trusted":true},"execution_count":54,"outputs":[{"name":"stdout","text":"Prediction:  [2]\nLabel:  2\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]}]}